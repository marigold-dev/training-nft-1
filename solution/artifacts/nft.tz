{ parameter
    (or (pair %mint nat bytes bytes bytes bytes)
        (or (list %update_operators
               (or (pair %add_operator (address %owner) (address %operator) (nat %token_id))
                   (pair %remove_operator (address %owner) (address %operator) (nat %token_id))))
            (or (pair %balance_of
                   (list %requests (pair (address %owner) (nat %token_id)))
                   (contract %callback
                      (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))))
                (list %transfer
                   (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount)))))))) ;
  storage
    (pair (set %extension address)
          (big_map %ledger nat address)
          (big_map %operators (pair address address) (set nat))
          (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))
          (big_map %metadata string bytes)) ;
  code { LAMBDA
           address
           unit
           { PUSH string "The sender can only manage operators for his own token" ;
             SENDER ;
             DIG 2 ;
             COMPARE ;
             EQ ;
             IF { DROP ; UNIT } { FAILWITH } } ;
         LAMBDA
           (pair (big_map nat (pair nat (map string bytes))) nat)
           unit
           { UNPAIR ;
             SWAP ;
             GET ;
             IF_NONE { PUSH string "FA2_TOKEN_UNDEFINED" ; FAILWITH } { DROP } ;
             UNIT } ;
         LAMBDA
           (pair (big_map nat address) nat address)
           bool
           { UNPAIR 3 ;
             SWAP ;
             GET ;
             IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
             COMPARE ;
             EQ } ;
         DIG 3 ;
         UNPAIR ;
         IF_LEFT
           { DIG 2 ;
             DIG 3 ;
             DIG 4 ;
             DROP 3 ;
             UNPAIR 5 ;
             DUP 6 ;
             CAR ;
             SENDER ;
             MEM ;
             NOT ;
             IF { DROP 6 ; PUSH string "1" ; FAILWITH }
                { DUP 6 ;
                  DUP 7 ;
                  GET 3 ;
                  SENDER ;
                  DUP 4 ;
                  DUG 2 ;
                  SOME ;
                  DIG 2 ;
                  UPDATE ;
                  UPDATE 3 ;
                  DIG 6 ;
                  GET 7 ;
                  EMPTY_MAP string bytes ;
                  PUSH bytes 0x30 ;
                  SOME ;
                  PUSH string "decimals" ;
                  UPDATE ;
                  DIG 6 ;
                  SOME ;
                  PUSH string "symbol" ;
                  UPDATE ;
                  DUP 7 ;
                  SOME ;
                  PUSH string "thumbnailUri" ;
                  UPDATE ;
                  DUP 7 ;
                  SOME ;
                  PUSH string "displayUri" ;
                  UPDATE ;
                  DIG 6 ;
                  SOME ;
                  PUSH string "artifactUri" ;
                  UPDATE ;
                  PUSH bytes 0x5b22545a49502d3132225d ;
                  SOME ;
                  PUSH string "interfaces" ;
                  UPDATE ;
                  DIG 5 ;
                  SOME ;
                  PUSH string "description" ;
                  UPDATE ;
                  DIG 4 ;
                  SOME ;
                  PUSH string "name" ;
                  UPDATE ;
                  DUP 4 ;
                  PAIR ;
                  SOME ;
                  DIG 3 ;
                  UPDATE ;
                  UPDATE 7 ;
                  EMPTY_BIG_MAP (pair address address) (set nat) ;
                  UPDATE 5 ;
                  NIL operation ;
                  PAIR } }
           { IF_LEFT
               { DIG 2 ;
                 DIG 3 ;
                 DROP 2 ;
                 DUP 2 ;
                 GET 5 ;
                 LAMBDA
                   (pair (lambda address unit)
                         (pair (big_map (pair address address) (set nat))
                               (or (pair address address nat) (pair address address nat))))
                   (big_map (pair address address) (set nat))
                   { UNPAIR ;
                     SWAP ;
                     UNPAIR ;
                     SWAP ;
                     IF_LEFT
                       { DUP ;
                         GET 3 ;
                         DUP 2 ;
                         CAR ;
                         DUP 2 ;
                         DUP 2 ;
                         COMPARE ;
                         EQ ;
                         IF { SWAP ; DIG 2 ; DIG 4 ; DROP 4 }
                            { DUP ;
                              DIG 5 ;
                              SWAP ;
                              EXEC ;
                              DROP ;
                              DUP 4 ;
                              DUP 3 ;
                              DUP 3 ;
                              PAIR ;
                              GET ;
                              IF_NONE { EMPTY_SET nat } {} ;
                              DIG 3 ;
                              GET 4 ;
                              SWAP ;
                              PUSH bool True ;
                              DIG 2 ;
                              UPDATE ;
                              DIG 3 ;
                              SWAP ;
                              SOME ;
                              DIG 3 ;
                              DIG 3 ;
                              PAIR ;
                              UPDATE } }
                       { DUP ;
                         GET 3 ;
                         DUP 2 ;
                         CAR ;
                         DUP 2 ;
                         DUP 2 ;
                         COMPARE ;
                         EQ ;
                         IF { SWAP ; DIG 2 ; DIG 4 ; DROP 4 }
                            { DUP ;
                              DIG 5 ;
                              SWAP ;
                              EXEC ;
                              DROP ;
                              DUP 4 ;
                              DIG 4 ;
                              DUP 4 ;
                              DUP 4 ;
                              PAIR ;
                              GET ;
                              IF_NONE
                                { DIG 3 ; DROP ; NONE (set nat) }
                                { PUSH bool False ;
                                  DIG 5 ;
                                  GET 4 ;
                                  UPDATE ;
                                  PUSH nat 0 ;
                                  DUP 2 ;
                                  SIZE ;
                                  COMPARE ;
                                  EQ ;
                                  IF { DROP ; NONE (set nat) } { SOME } } ;
                              DIG 3 ;
                              DIG 3 ;
                              PAIR ;
                              UPDATE } } } ;
                 DUP 5 ;
                 APPLY ;
                 DIG 4 ;
                 DROP ;
                 SWAP ;
                 DIG 2 ;
                 ITER { SWAP ; PAIR ; DUP 2 ; SWAP ; EXEC } ;
                 SWAP ;
                 DROP ;
                 DUP 2 ;
                 SWAP ;
                 UPDATE 5 ;
                 NIL operation ;
                 PAIR ;
                 SWAP ;
                 DUP 2 ;
                 CDR ;
                 GET 3 ;
                 UPDATE 3 ;
                 DUP 2 ;
                 CDR ;
                 GET 8 ;
                 UPDATE 8 ;
                 DUP 2 ;
                 CDR ;
                 GET 7 ;
                 UPDATE 7 ;
                 DUP 2 ;
                 CDR ;
                 GET 5 ;
                 UPDATE 5 ;
                 SWAP ;
                 CAR }
               { DIG 4 ;
                 DROP ;
                 IF_LEFT
                   { UNPAIR ;
                     MAP { DUP ;
                           UNPAIR ;
                           DUP 2 ;
                           DUP 6 ;
                           GET 7 ;
                           PAIR ;
                           DUP 8 ;
                           SWAP ;
                           EXEC ;
                           DROP ;
                           PUSH nat 0 ;
                           SWAP ;
                           DIG 2 ;
                           DUP 6 ;
                           GET 3 ;
                           PAIR 3 ;
                           DUP 6 ;
                           SWAP ;
                           EXEC ;
                           IF { DROP ; PUSH nat 1 } {} ;
                           SWAP ;
                           PAIR } ;
                     DIG 3 ;
                     DIG 4 ;
                     DROP 2 ;
                     SWAP ;
                     PUSH mutez 0 ;
                     DIG 2 ;
                     TRANSFER_TOKENS ;
                     DUP 2 ;
                     NIL operation ;
                     DIG 2 ;
                     CONS ;
                     PAIR ;
                     SWAP ;
                     DUP 2 ;
                     CDR ;
                     GET 3 ;
                     UPDATE 3 ;
                     DUP 2 ;
                     CDR ;
                     GET 8 ;
                     UPDATE 8 ;
                     DUP 2 ;
                     CDR ;
                     GET 7 ;
                     UPDATE 7 ;
                     DUP 2 ;
                     CDR ;
                     GET 5 ;
                     UPDATE 5 ;
                     SWAP ;
                     CAR }
                   { DUP 2 ;
                     GET 3 ;
                     SWAP ;
                     ITER { UNPAIR ;
                            DUG 2 ;
                            ITER { UNPAIR 3 ;
                                   DIG 2 ;
                                   DROP ;
                                   DUP 2 ;
                                   DUP 6 ;
                                   GET 7 ;
                                   PAIR ;
                                   DUP 8 ;
                                   SWAP ;
                                   EXEC ;
                                   DROP ;
                                   SENDER ;
                                   DUP 5 ;
                                   DUP 2 ;
                                   COMPARE ;
                                   NEQ ;
                                   IF { DUP 6 ;
                                        GET 5 ;
                                        SWAP ;
                                        DUP 6 ;
                                        PAIR ;
                                        GET ;
                                        IF_NONE { EMPTY_SET nat } {} ;
                                        DUP 3 ;
                                        MEM ;
                                        NOT ;
                                        IF { PUSH string "FA2_NOT_OPERATOR" ; FAILWITH } {} }
                                      { DROP } ;
                                   PUSH string "FA2_INSUFFICIENT_BALANCE" ;
                                   DUP 5 ;
                                   DUP 4 ;
                                   DUP 6 ;
                                   PAIR 3 ;
                                   DUP 8 ;
                                   SWAP ;
                                   EXEC ;
                                   IF { DROP } { FAILWITH } ;
                                   DIG 2 ;
                                   SWAP ;
                                   SOME ;
                                   DIG 2 ;
                                   UPDATE } ;
                            SWAP ;
                            DROP } ;
                     DIG 2 ;
                     DIG 3 ;
                     DROP 2 ;
                     DUP 2 ;
                     SWAP ;
                     UPDATE 3 ;
                     NIL operation ;
                     PAIR ;
                     SWAP ;
                     DUP 2 ;
                     CDR ;
                     GET 3 ;
                     UPDATE 3 ;
                     DUP 2 ;
                     CDR ;
                     GET 8 ;
                     UPDATE 8 ;
                     DUP 2 ;
                     CDR ;
                     GET 7 ;
                     UPDATE 7 ;
                     DUP 2 ;
                     CDR ;
                     GET 5 ;
                     UPDATE 5 ;
                     SWAP ;
                     CAR } } ;
             PAIR } } }

