#import "@ligo/fa/lib/fa2/nft/extendable_nft.impl.jsligo" "FA2Impl"

/* ERROR MAP FOR UI DISPLAY or TESTS
       const errorMap : map<string,string> = Map.literal(list([
         ["0", "Enter a positive and not null amount"],
         ["1", "Operation not allowed, you need to be administrator"],
         ["2", "You cannot sell more than your current balance"],
         ["3", "Cannot find the offer you entered for buying"],
         ["4", "You entered a quantity to buy than is more than the offer quantity"],
         ["5", "Not enough funds, you need to pay at least quantity * offer price to get the tokens"],
         ["6", "Cannot find the contract relative to implicit address"],
       ]));
   */
export type Extension = { administrators: set<address> }

export type storage = FA2Impl.storage<Extension>; // extension administrators


type ret = [list<operation>, storage];

@entry
const transfer = (p: FA2Impl.TZIP12.transfer, s: storage): ret => {
  const ret2: [list<operation>, storage] = FA2Impl.transfer(p, s);
  return [
    ret2[0],
    {
      ...s,
      ledger: ret2[1].ledger,
      metadata: ret2[1].metadata,
      token_metadata: ret2[1].token_metadata,
      operators: ret2[1].operators,
    }
  ]
};

@entry
const balance_of = (p: FA2Impl.TZIP12.balance_of, s: storage): ret => {
  const ret2: [list<operation>, storage] = FA2Impl.balance_of(p, s);
  return [
    ret2[0],
    {
      ...s,
      ledger: ret2[1].ledger,
      metadata: ret2[1].metadata,
      token_metadata: ret2[1].token_metadata,
      operators: ret2[1].operators,
    }
  ]
};

@entry
const update_operators = (p: FA2Impl.TZIP12.update_operators, s: storage): ret => {
  const ret2: [list<operation>, storage] = FA2Impl.update_operators(p, s);
  return [
    ret2[0],
    {
      ...s,
      ledger: ret2[1].ledger,
      metadata: ret2[1].metadata,
      token_metadata: ret2[1].token_metadata,
      operators: ret2[1].operators,
    }
  ]
};

@entry
const mint = (
  [token_id, name, description, symbol, ipfsUrl]: [
    nat,
    bytes,
    bytes,
    bytes,
    bytes
  ],
  s: storage
): ret => {
  if (! Set.mem(Tezos.get_sender(), s.extension.administrators)) return failwith(
    "1"
  );
  const token_info: map<string, bytes> =
    Map.literal(
      list(
        [
          ["name", name],
          ["description", description],
          ["interfaces", (bytes `["TZIP-12"]`)],
          ["artifactUri", ipfsUrl],
          ["displayUri", ipfsUrl],
          ["thumbnailUri", ipfsUrl],
          ["symbol", symbol],
          ["decimals", (bytes `0`)]
        ]
      )
    ) as map<string, bytes>;
  return [
    list([]) as list<operation>,
    {
      ...s,
      ledger: Big_map.add(token_id, Tezos.get_sender(), s.ledger) as
        FA2Impl.ledger,
      token_metadata: Big_map.add(
        token_id,
        { token_id: token_id, token_info: token_info },
        s.token_metadata
      ),
      operators: Big_map.empty as FA2Impl.operators,
    }
  ]
};
