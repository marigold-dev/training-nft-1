#import "../lib/fa2/common/errors.mligo" "Errors"

#import "../lib/fa2/common/assertions.jsligo" "Assertions"

#import "../lib/fa2/common/tzip12.datatypes.jsligo" "TZIP12"

#import "../lib/fa2/common/tzip12.interfaces.jsligo" "TZIP12Interface"

#import "../lib/fa2/common/tzip16.datatypes.jsligo" "TZIP16"

export namespace NFT implements TZIP12Interface.FA2{
    export type ledger = big_map<nat, address>;
    type operator = address;
    export type operators = big_map<[address, operator], set<nat>>;
    export type storage = {
        extension: unit,
        ledger: ledger,
        operators: operators,
        token_metadata: TZIP12.tokenMetadata,
        metadata: TZIP16.metadata,
    };
    type ret = [list<operation>, storage];
    @entry
    const transfer = (p: TZIP12.transfer, s: storage): ret => {
        failwith("TODO");
    };
    @entry
    const balance_of = (p: TZIP12.balance_of, s: storage): ret => {
        failwith("TODO");
    };
    @entry
    const update_operators = (p: TZIP12.update_operators, s: storage): ret => {
        failwith("TODO");
    };

    @view
    const get_balance = (p: [address, nat], s: storage): nat => {
        failwith("TODO");
    }

    @view
    const total_supply = (token_id: nat, s: storage): nat => {
        failwith("TODO");
    }

    @view
    const all_tokens = (_: unit, s: storage): set<nat> => {
        failwith("TODO");
    }

    @view
    const is_operator = (op: TZIP12.operator, s: storage): bool => {
        failwith("TODO");
    }

    @view
    const token_metadata = (p: nat, s: storage): TZIP12.tokenMetadataData => {
        failwith("TODO");
    }
}
